
PASTEBIN
API
TOOLS
FAQ
paste
Rahu16
FREE
Rahu16
 

SHARE
TWEET
sourangshu
tfod
SOURANGSHU
JUL 6TH, 2020 (EDITED)
2,919
NEVER
 5.84 KB
     
https://github.com/tensorflow/models/tree/v1.13.0  ###  Download Repo
 
http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz ###  Download Repo
 
 
https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_detection_zoo.md ### Model Zoo Link
 
https://drive.google.com/file/d/12F5oGAuQg7qBM_267TCMt_rlorV-M7gf/view?usp=sharing ### Dataset & utils Download
 
https://c17hawke.github.io/tfod-setup/p02/   ##Google Colab Setup
 
 
 
# Creating virtual env using conda
conda create -n your_env_name python=3.6
 
conda activate your_env_name
 
# pypi 
pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow==1.14.0
 
# From Research Folder
 
python setup.py install #install object detection
 
 
########################################################################################################
 
For protobuff to py conversion
https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protoc-3.11.0-win64.zip
 
C
 
protoc --python_out=. .\object_detection\protos\anchor_generator.proto .\object_detection\protos\argmax_matcher.proto .\object_detection\protos\bipartite_matcher.proto .\object_detection\protos\box_coder.proto .\object_detection\protos\box_predictor.proto .\object_detection\protos\eval.proto .\object_detection\protos\faster_rcnn.proto .\object_detection\protos\faster_rcnn_box_coder.proto .\object_detection\protos\grid_anchor_generator.proto .\object_detection\protos\hyperparams.proto .\object_detection\protos\image_resizer.proto .\object_detection\protos\input_reader.proto .\object_detection\protos\losses.proto .\object_detection\protos\matcher.proto .\object_detection\protos\mean_stddev_box_coder.proto .\object_detection\protos\model.proto .\object_detection\protos\optimizer.proto .\object_detection\protos\pipeline.proto .\object_detection\protos\post_processing.proto .\object_detection\protos\preprocessor.proto .\object_detection\protos\region_similarity_calculator.proto .\object_detection\protos\square_box_coder.proto .\object_detection\protos\ssd.proto .\object_detection\protos\ssd_anchor_generator.proto .\object_detection\protos\string_int_label_map.proto .\object_detection\protos\train.proto .\object_detection\protos\keypoint_box_coder.proto .\object_detection\protos\multiscale_anchor_generator.proto .\object_detection\protos\graph_rewriter.proto
 
# conda package manager
conda install -c anaconda protobuf
 
# linux mac
protoc object_detection/protos/*.proto --python_out=.
#windows
protoc object_detection/protos/*.proto --python_out=.
 
 
 
#command to open Jupiter notebook from terminal.
jupyter notebook
 
and open the "object_detection_tutorial.ipynb"
 
#command for Object detection program:
 
%matplotlib inline
plt.figure(figsize=(200,200))
plt.imshow(image_np)
 
 
 
 
#code to get the pop camera
 
import cv2
 
cap = cv2.VideoCapture(0)
with detection_graph.as_default():
  with tf.Session(graph=detection_graph) as sess:
    while True:
      ret, image_np = cap.read()
      # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
      image_np_expanded = np.expand_dims(image_np, axis=0)
      image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
      # Each box represents a part of the image where a particular object was detected.
      boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
      # Each score represent how level of confidence for each of the objects.
      # Score is shown on the result image, together with the class label.
      scores = detection_graph.get_tensor_by_name('detection_scores:0')
      classes = detection_graph.get_tensor_by_name('detection_classes:0')
      num_detections = detection_graph.get_tensor_by_name('num_detections:0')
      # Actual detection.
      (boxes, scores, classes, num_detections) = sess.run([boxes, scores, classes, num_detections],feed_dict={image_tensor: image_np_expanded})
      # Visualization of the results of a detection.
      vis_util.visualize_boxes_and_labels_on_image_array(
          image_np,
          np.squeeze(boxes),
          np.squeeze(classes).astype(np.int32),
          np.squeeze(scores),
          category_index,
          use_normalized_coordinates=True,
          line_thickness=8)
 
      cv2.imshow('object detection', cv2.resize(image_np, (800,600)))
      if cv2.waitKey(25) & 0xFF == ord('q'):
        cv2.destroyAllWindows()
        break
 
cap.release()
 
 
 
##############################################################################################################
 
#Labelimg link
https://tzutalin.github.io/labelImg/
 
 
#copy the file xml_to_csv from utils folder to models repo in reaserch folder
python xml_to_csv.py (tensorflow1/models/research/object_detection)
 
 
 
#copy the file tfgenerate.record from utils folder to models repo in reaserch folder
 
 
python generate_tfrecord.py --csv_input=images/train_labels.csv --image_dir=images/train --output_path=train.record
python generate_tfrecord.py --csv_input=images/test_labels.csv --image_dir=images/test --output_path=test.record
 
 
###
 
Copy the file train from legacy folder in object_detection to research
## Run from research folder
 
python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/faster_rcnn_inception_v2_coco.config
 
# Copy the file from object_detection to research
## Replace the XXXX with the last generated ckpt file inside the training folder.
 
python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/faster_rcnn_inception_v2_coco.config --trained_checkpoint_prefix training/model.ckpt-1000 --output_directory inference_graph
 
 
 
https://github.com/tzutalin/labelImg--- Linux
 
sudo puttygen pemKey.pem -o ppkKey.ppk -O private
 
http://www.rignitc.com/2018/12/29/install-cuda-10-with-ubuntu-16-04/
RAW Paste Data
https://github.com/tensorflow/models/tree/v1.13.0  ###  Download Repo

http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz ###  Download Repo


https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_detection_zoo.md ### Model Zoo Link

https://drive.google.com/file/d/12F5oGAuQg7qBM_267TCMt_rlorV-M7gf/view?usp=sharing ### Dataset & utils Download

https://c17hawke.github.io/tfod-setup/p02/   ##Google Colab Setup



# Creating virtual env using conda
conda create -n your_env_name python=3.6

conda activate your_env_name

# pypi 
pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow==1.14.0

# From Research Folder

python setup.py install #install object detection


########################################################################################################

For protobuff to py conversion
https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protoc-3.11.0-win64.zip

C

protoc --python_out=. .\object_detection\protos\anchor_generator.proto .\object_detection\protos\argmax_matcher.proto .\object_detection\protos\bipartite_matcher.proto .\object_detection\protos\box_coder.proto .\object_detection\protos\box_predictor.proto .\object_detection\protos\eval.proto .\object_detection\protos\faster_rcnn.proto .\object_detection\protos\faster_rcnn_box_coder.proto .\object_detection\protos\grid_anchor_generator.proto .\object_detection\protos\hyperparams.proto .\object_detection\protos\image_resizer.proto .\object_detection\protos\input_reader.proto .\object_detection\protos\losses.proto .\object_detection\protos\matcher.proto .\object_detection\protos\mean_stddev_box_coder.proto .\object_detection\protos\model.proto .\object_detection\protos\optimizer.proto .\object_detection\protos\pipeline.proto .\object_detection\protos\post_processing.proto .\object_detection\protos\preprocessor.proto .\object_detection\protos\region_similarity_calculator.proto .\object_detection\protos\square_box_coder.proto .\object_detection\protos\ssd.proto .\object_detection\protos\ssd_anchor_generator.proto .\object_detection\protos\string_int_label_map.proto .\object_detection\protos\train.proto .\object_detection\protos\keypoint_box_coder.proto .\object_detection\protos\multiscale_anchor_generator.proto .\object_detection\protos\graph_rewriter.proto

# conda package manager
conda install -c anaconda protobuf

# linux mac
protoc object_detection/protos/*.proto --python_out=.
#windows
protoc object_detection/protos/*.proto --python_out=.



#command to open Jupiter notebook from terminal.
jupyter notebook

and open the "object_detection_tutorial.ipynb"

#command for Object detection program:

%matplotlib inline
plt.figure(figsize=(200,200))
plt.imshow(image_np)




#code to get the pop camera

import cv2

cap = cv2.VideoCapture(0)
with detection_graph.as_default():
  with tf.Session(graph=detection_graph) as sess:
    while True:
      ret, image_np = cap.read()
      # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
      image_np_expanded = np.expand_dims(image_np, axis=0)
      image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
      # Each box represents a part of the image where a particular object was detected.
      boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
      # Each score represent how level of confidence for each of the objects.
      # Score is shown on the result image, together with the class label.
      scores = detection_graph.get_tensor_by_name('detection_scores:0')
      classes = detection_graph.get_tensor_by_name('detection_classes:0')
      num_detections = detection_graph.get_tensor_by_name('num_detections:0')
      # Actual detection.
      (boxes, scores, classes, num_detections) = sess.run([boxes, scores, classes, num_detections],feed_dict={image_tensor: image_np_expanded})
      # Visualization of the results of a detection.
      vis_util.visualize_boxes_and_labels_on_image_array(
          image_np,
          np.squeeze(boxes),
          np.squeeze(classes).astype(np.int32),
          np.squeeze(scores),
          category_index,
          use_normalized_coordinates=True,
          line_thickness=8)

      cv2.imshow('object detection', cv2.resize(image_np, (800,600)))
      if cv2.waitKey(25) & 0xFF == ord('q'):
        cv2.destroyAllWindows()
        break

cap.release()



##############################################################################################################

#Labelimg link
https://tzutalin.github.io/labelImg/


#copy the file xml_to_csv from utils folder to models repo in reaserch folder
python xml_to_csv.py (tensorflow1/models/research/object_detection)



#copy the file tfgenerate.record from utils folder to models repo in reaserch folder


python generate_tfrecord.py --csv_input=images/train_labels.csv --image_dir=images/train --output_path=train.record
python generate_tfrecord.py --csv_input=images/test_labels.csv --image_dir=images/test --output_path=test.record


###

Copy the file train from legacy folder in object_detection to research
## Run from research folder

python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/faster_rcnn_inception_v2_coco.config

# Copy the file from object_detection to research
## Replace the XXXX with the last generated ckpt file inside the training folder.

python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/faster_rcnn_inception_v2_coco.config --trained_checkpoint_prefix training/model.ckpt-1000 --output_directory inference_graph



https://github.com/tzutalin/labelImg--- Linux

sudo puttygen pemKey.pem -o ppkKey.ppk -O private

http://www.rignitc.com/2018/12/29/install-cuda-10-with-ubuntu-16-04/

My Pastes
Nothing here yet...
Public Pastes
Untitled
Apache Log | 8 min ago
Untitled
JavaScript | 32 min ago
CPB-WEAPONS-SPAWNA...
XML | 41 min ago
CPB-WEAPONs-DAYZ.T...
XML | 42 min ago
s2 Shootout fields
JSON | 44 min ago
Tree3
Python | 46 min ago
GenerateList
Lua | 59 min ago
CrossFire_V2
Java | 1 hour ago

create new paste  /  syntax languages  /  archive  /  faq  /  tools  /  night mode  /  api  /  scraping api   /  pro
privacy statement  /  cookies policy  /  terms of serviceupdated  /  security disclosure  /  dmca  /  report abuse  /  contact

By using Pastebin.com you agree to our cookies policy to enhance your experience.
Site design & logo © 2021 Pastebin
